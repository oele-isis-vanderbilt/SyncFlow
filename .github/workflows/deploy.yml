name: Deploy to EC2 / Docker Cleanup

on:
  push:
    branches:
      - main
      - 83-rename-project

  schedule:
    - cron: '0 0 * * *' # Run every day at 00:00 UTC

jobs:
  DeployToEC2:
    name: Deploy API to EC2
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4
      - name: Build and Deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIV_KEY_PEM }}
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          openssl rsa -in private_key -check
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOST} '
            echo "Pulling latest changes from GitHub"
            rm -rf $HOME/SyncFlowDeployment && cd $HOME
            mkdir SyncFlowDeployment && cd SyncFlowDeployment
            git clone git@github.com:oele-isis-vanderbilt/SyncFlow.git
            cd SyncFlow
            git checkout -b 83-rename-project origin/83-rename-project
            cp $HOME/.deployment_config_prod_cloud.json  deployment_config_prod_cloud.json
            chmod +x docker/generate-prod-config
            ./docker/generate-prod-config --config-file deployment_config_prod_cloud.json --outfile-name .env.prod
            sudo chmod 666 /var/run/docker.sock
            docker compose -p livekit-mmla-prod --file docker/docker-compose.prod.yaml build api-livekit-mmla-prod migrations-prod livekit-mmla-dashboard-prod livekit-mmla-example-app-prod
            docker compose -p livekit-mmla-prod --file docker/docker-compose.prod.yaml down api-livekit-mmla-prod livekit-mmla-dashboard-prod livekit-mmla-example-app-prod
            docker compose -p livekit-mmla-prod --file docker/docker-compose.prod.yaml up -d
          '

      - name: Docker Cleanup on EC2
        if: github.event_name == 'schedule'
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIV_KEY_PEM }}
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          openssl rsa -in private_key -check
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOST} '
            sudo chmod 666 /var/run/docker.sock
            docker system prune -f
          '
