name: Deploy to EC2 / Docker Cleanup

on:
  push:
    branches:
      - main
      - 46-consolidate-dockerized-deployment

  schedule:
    - cron: '0 0 * * *' # Run every day at 00:00 UTC

jobs:
  DeployToEC2:
    name: Deploy API to EC2
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4
      - name: Build and Deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIV_KEY_PEM }}
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          openssl rsa -in private_key -check
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOST} '
            export DEPLOYMENT_CONFIG='${{ secrets.DEPLOYMENT_CONFIG }}'
            rm -rf LivekitMMLADeployment
            mkdir LivekitMMLADeployment
            cd LivekitMMLADeployment
            git clone git@github.com:oele-isis-vanderbilt/LiveKitMMLA.git
            cd LiveKitMMLA
            git checkout -b 46-consolidate-dockerized-deployment origin/46-consolidate-dockerized-deployment
            echo $DEPLOYMENT_CONFIG
            echo $DEPLOYMENT_CONFIG > deployment_config.json
#            chmod +x docker/generate-prod-config
#            ./docker/generate-prod-config --config-file deployment_config.json --outfile-name .env.prod
#            sudo chmod 666 /var/run/docker.sock
#            docker compose -p livekit-mmla-prod --file docker/docker-compose.prod.yaml down api-livekit-mmla-prod livekit-mmla-dashboard-prod
#            docker compose -p livekit-mmla-prod --file docker/docker-compose.prod.yaml build api-livekit-mmla-prod migrations-prod livekit-mmla-dashboard-prod
#            docker compose -p livekit-mmla-prod --file docker/docker-compose.prod.yaml up -d
          '

      - name: Docker Cleanup on EC2
        if: github.event_name == 'schedule'
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIV_KEY_PEM }}
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          openssl rsa -in private_key -check
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOST} '
            sudo chmod 666 /var/run/docker.sock
            docker system prune -f
          '
