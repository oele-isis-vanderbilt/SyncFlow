#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import json
from argparse import ArgumentParser
from dataclasses import asdict, dataclass
from typing import Any, Dict, Optional


def dump_string(s: str, path: str):
    with open(path, "w") as f:
        f.write(s)


@dataclass
class Config:
    def as_env(self, prefix: str = "") -> str:
        env = []
        for field, value in asdict(self).items():
            if isinstance(value, bool):
                value = str(value).lower()
            env.append(f'{prefix.upper()}{field.upper()}="{value}"')
        return "\n".join(env)


@dataclass
class DashboardConfig(Config):
    mmla_api_url: str
    next_public_mmla_api_url: str
    next_public_livekit_server_url: str
    auth_secret: str
    nextauth_url: str
    github_client_id: str
    github_client_secret: str
    nextauth_internal_url: str

    @classmethod
    def from_json(cls, json_dict: Dict[str, Any]) -> "DashboardConfig":
        return DashboardConfig(
            mmla_api_url=json_dict["mmla_api_url"],
            next_public_mmla_api_url=json_dict["next_public_mmla_api_url"],
            next_public_livekit_server_url=json_dict["next_public_livekit_server_url"],
            auth_secret=json_dict["auth_secret"],
            nextauth_url=json_dict["nextauth_url"],
            nextauth_internal_url=json_dict["nextauth_internal_url"],
            github_client_id=json_dict["github_client_id"],
            github_client_secret=json_dict["github_client_secret"],
        )


@dataclass
class DatabasePgAdminConfig(Config):
    postgres_user: str
    postgres_password: str
    postgres_db: str
    pgadmin_default_email: str
    pgadmin_default_password: str
    pgadmin_listen_port: int

    @classmethod
    def from_json(cls, json_dict: Dict[str, Any]) -> "DatabasePgAdminConfig":
        return DatabasePgAdminConfig(
            postgres_user=json_dict["postgres_user"],
            postgres_password=json_dict["postgres_password"],
            postgres_db=json_dict["postgres_db"],
            pgadmin_default_email=json_dict["pgadmin_default_email"],
            pgadmin_default_password=json_dict["pgadmin_default_password"],
            pgadmin_listen_port=json_dict["pgadmin_listen_port"],
        )


@dataclass
class MigrationConfig(Config):
    database_url: str

    @classmethod
    def from_json(cls, json_dict: Dict[str, Any]) -> "MigrationConfig":
        return MigrationConfig(database_url=json_dict["database_url"])


@dataclass
class RootUser(Config):
    email: str
    password: str
    username: str

    @classmethod
    def from_json(cls, json_dict: Dict[str, Any]) -> "RootUser":
        return cls(
            username=json_dict["username"],
            email=json_dict["email"],
            password=json_dict["password"],
        )


@dataclass
class RabbitMQConfig(Config):
    root_username: str
    root_password: str
    host: str
    port: int
    use_ssl: bool
    vhost_name: str
    queue_name: str
    exchange_name: str

    @classmethod
    def from_json(cls, json_dict: Dict[str, Any]) -> "RabbitMQConfig":
        return RabbitMQConfig(
            root_username=json_dict["root_username"],
            root_password=json_dict["root_password"],
            host=json_dict["host"],
            port=json_dict["port"],
            use_ssl=json_dict["use_ssl"],
            vhost_name=json_dict["vhost_name"],
            queue_name=json_dict["queue_name"],
            exchange_name=json_dict["exchange_name"],
        )


@dataclass
class ServiceConfig(Config):
    app_host: str
    app_port: int
    database_url: str
    num_actix_workers: int
    jwt_secret: str
    encryption_key: str
    jwt_expiration: int
    jwt_refresh_expiration: int
    rabbitmq_config: RabbitMQConfig
    github_client_id: Optional[str] = None
    github_client_secret: Optional[str] = None
    root_user: Optional[RootUser] = None
    login_token: Optional[str] = None
    test_user: Optional[str] = None
    test_password: Optional[str] = None

    @classmethod
    def from_json(cls, json_dict: Dict[str, Any]) -> "ServiceConfig":

        if "root_user" in json_dict:
            root_user = RootUser.from_json(json_dict["root_user"])
        else:
            root_user = None

        rabbitmq_config = RabbitMQConfig.from_json(json_dict["rabbitmq_config"])

        return cls(
            app_host=json_dict["app_host"],
            app_port=json_dict["app_port"],
            database_url=json_dict["database_url"],
            num_actix_workers=json_dict["num_actix_workers"],
            jwt_secret=json_dict["jwt_secret"],
            encryption_key=json_dict["encryption_key"],
            jwt_expiration=json_dict["jwt_expiration"],
            jwt_refresh_expiration=json_dict["jwt_refresh_expiration"],
            rabbitmq_config=rabbitmq_config,
            github_client_id=json_dict.get("github_client_id"),
            github_client_secret=json_dict.get("github_client_secret"),
            root_user=root_user,
            login_token=json_dict.get("login_token"),
            test_user=json_dict.get("test_user"),
            test_password=json_dict.get("test_password"),
        )

    def as_env(self, prefix: str = "") -> str:
        env = []
        for field, value in asdict(self).items():
            if field == "root_user" and value is not None:
                root_user_env = self.root_user.as_env(
                    prefix=f"{prefix.upper()}_ROOT_USER__" if prefix else "ROOT_USER__"
                )
                env.append(root_user_env)
            elif field == "rabbitmq_config" and value is not None:
                rabbitmq_env = self.rabbitmq_config.as_env(
                    prefix=(
                        f"{prefix.upper()}_RABBITMQ_CONFIG__"
                        if prefix
                        else "RABBITMQ_CONFIG__"
                    )
                )
                env.append(rabbitmq_env)
            elif value is not None:
                env.append(f'{prefix.upper()}{field.upper()}="{value}"')
        return "\n".join(env)


@dataclass
class ConsolidatedConfig:
    dashboard_config: DashboardConfig
    service_config: ServiceConfig
    migration_config: MigrationConfig
    database_pgadmin_config: DatabasePgAdminConfig

    @classmethod
    def from_json(cls, json_dict: Dict[str, Any]) -> "ConsolidatedConfig":
        return cls(
            dashboard_config=DashboardConfig.from_json(json_dict["dashboard"]),
            service_config=ServiceConfig.from_json(json_dict["service"]),
            database_pgadmin_config=DatabasePgAdminConfig.from_json(
                json_dict["database_pgadmin"]
            ),
            migration_config=MigrationConfig.from_json(json_dict["migration"]),
        )

    def get_dashboard_env(self, prefix: str = "") -> str:
        return self.dashboard_config.as_env(prefix=prefix)

    def get_service_env(self, prefix: str = "") -> str:
        return self.service_config.as_env(prefix=prefix)

    def get_database_pgadmin_env(self, prefix: str = "") -> str:
        return self.database_pgadmin_config.as_env(prefix=prefix)

    def get_migration_env(self, prefix: str = "") -> str:
        return self.migration_config.as_env(prefix=prefix)


def main(config_file: str, outfile_name: str):
    with open(config_file, "r") as f:
        config = ConsolidatedConfig.from_json(json.loads(f.read()))

    dashboard_env = config.get_dashboard_env() + "\n"
    dump_string(dashboard_env, f"dashboard/{outfile_name}")

    service_env = config.get_service_env() + "\n"
    dump_string(service_env, f"crates/{outfile_name}")

    database_pgadmin_env = config.get_database_pgadmin_env() + "\n"
    dump_string(database_pgadmin_env, f"crates/{outfile_name}.pgadmin")

    migration_env = config.get_migration_env() + "\n"
    dump_string(migration_env, f"crates/infrastructure/{outfile_name}")
    dump_string(migration_env, f"crates/{outfile_name}.migration")


if __name__ == "__main__":
    parser = ArgumentParser("Generate production config files from a json file.")
    parser.add_argument("--config-file", type=str, required=True)
    parser.add_argument("--outfile-name", type=str, default=".env")
    args = parser.parse_args()

    main(args.config_file, args.outfile_name)
